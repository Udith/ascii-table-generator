{"version":3,"sources":["components/input-table.js","util/toast-util.js","components/output-table.js","components/table-generator.js","App.js","reportWebVitals.js","index.js"],"names":["InputTable","renderColumnHeader","columnIndex","props","columns","name","align","className","nameRenderer","onChange","setColumnName","onCancel","onConfirm","content","minimal","intent","Intent","PRIMARY","icon","getAlignmentIcon","onClick","changeColumnAlignment","renderCell","rowIndex","value","rows","getAlignmentClass","setCellValue","newRows","onChangeRows","onChangeColumn","getNextAlignment","currentAlignment","ALIGNMENT","LEFT","CENTER","RIGHT","renderActionCell","title","SUCCESS","small","IconNames","ADD","addNewRow","DUPLICATE","duplicateRow","disabled","ARROW_UP","moveRowUp","length","ARROW_DOWN","moveRowDown","DANGER","TRASH","deleteRow","alignment","ALIGN_RIGHT","ALIGN_CENTER","ALIGN_LEFT","Classes","autoFill","forEach","column","index","trim","numCols","numColumns","i","halfCount","words","randomWords","exactly","wordsPerString","concat","sort","Math","random","push","this","map","cellRenderer","columnHeaderCellRenderer","actionColumn","outlined","RANDOM","WARNING","numRows","numFrozenColumns","splice","Array","fill","currentRow","React","Component","toaster","Toaster","create","position","Position","BOTTOM_RIGHT","TOAST_UTIL","showSuccessToast","message","show","TICK","timeout","BORDER_CHAR","OutputTable","toggleRowSeparators","e","setState","addRowSep","target","checked","regenerateTable","generateTable","copyToClipboard","selection","window","getSelection","range","document","createRange","selectNode","getElementById","removeAllRanges","addRange","execCommand","columnWidths","getColumnWidths","alignments","col","asciiTable","headerSep","getHeaderSeparator","rowSep","state","getRowSeparator","addLineToTable","generateRow","row","version","widths","maxWidth","cellValue","cellValues","cell","colWidth","padStart","padEnd","join","prevProps","prevState","snapshot","inline","labelElement","REFRESH","CLIPBOARD","id","headerSeparator","repeat","rowSeparator","table","line","noNewLinePrefix","TableGenerator","onNumColChange","isNaN","Number","onColChangeApply","generateColumns","currentColumns","slice","newColumns","INLINE","type","placeholder","min","rightElement","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.d06bfdde.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport {Cell, Column, ColumnHeaderCell, EditableCell2, EditableName, Table2} from \"@blueprintjs/table\";\nimport {Button, Intent, Classes, UL, Callout, H3} from \"@blueprintjs/core\";\nimport {Tooltip2} from \"@blueprintjs/popover2\";\nimport {IconNames} from \"@blueprintjs/icons\";\nimport './input-table.css';\nimport {ALIGNMENT} from \"./table-generator\";\nimport randomWords from \"random-words\";\n\n/**\n * @author Udith Gunaratna\n */\nexport default class InputTable extends React.Component {\n\n    render() {\n        const columns = this.props.columns.map((column, index) => {\n            return (\n                <Column key={index} cellRenderer={this.renderCell} columnHeaderCellRenderer={this.renderColumnHeader}/>\n            );\n        });\n\n        const actionColumn = <Column key='actions'\n                                     columnHeaderCellRenderer={() => <ColumnHeaderCell name=''/>}\n                                     cellRenderer={this.renderActionCell}/>;\n\n        return (\n            <Fragment>\n                <div className='section-title-bar'>\n                    <H3>Input</H3>\n                    <div className='section-title-buttons'>\n                        <Button outlined={true} minimal={true} icon={IconNames.RANDOM} intent={Intent.WARNING}\n                                onClick={this.autoFill}>\n                            Auto fill with Random Words\n                        </Button>\n                    </div>\n                </div>\n                <Callout className='instructions'>\n                    <UL>\n                        <li>Click on a Column Header to edit the Column Name</li>\n                        <li>Double-Click on a Cell to edit the Cell value</li>\n                    </UL>\n                </Callout>\n\n                <Table2 numRows={this.props.rows.length} numFrozenColumns={1}>\n                    {[actionColumn].concat(columns)}\n                </Table2>\n            </Fragment>\n        );\n    }\n\n    renderColumnHeader = (columnIndex) => {\n        const columnName = (name) => {\n            return (\n                <EditableName\n                    name={name}\n                    onChange={name => this.setColumnName(columnIndex - 1, name)}\n                    onCancel={name => this.setColumnName(columnIndex - 1, name)}\n                    onConfirm={name => this.setColumnName(columnIndex - 1, name)}\n                />\n            );\n        };\n        const {name, align} = this.props.columns[columnIndex - 1];\n        return <ColumnHeaderCell\n            className='column-header-with-align'\n            name={name}\n            nameRenderer={columnName}>\n            <Tooltip2 content={`Align ${align}`}>\n                <Button minimal={true}\n                        intent={Intent.PRIMARY}\n                        icon={this.getAlignmentIcon(align)}\n                        onClick={() => this.changeColumnAlignment(columnIndex - 1)}/>\n            </Tooltip2>\n        </ColumnHeaderCell>;\n    };\n\n    renderCell = (rowIndex, columnIndex) => {\n        const {align} = this.props.columns[columnIndex - 1];\n        const value = this.props.rows[rowIndex][columnIndex - 1];\n        return (\n            <EditableCell2\n                className={this.getAlignmentClass(align)}\n                value={value}\n                onChange={value => this.setCellValue(rowIndex, columnIndex - 1, value)}\n                onCancel={value => this.setCellValue(rowIndex, columnIndex - 1, value)}\n                onConfirm={value => this.setCellValue(rowIndex, columnIndex - 1, value)}\n            />\n        );\n    };\n\n    setCellValue = (rowIndex, columnIndex, value) => {\n        const newRows = [...this.props.rows];\n        newRows[rowIndex][columnIndex] = value;\n        this.props.onChangeRows(newRows);\n    }\n\n    setColumnName = (columnIndex, value) => {\n        const {align} = this.props.columns[columnIndex];\n        this.props.onChangeColumn(columnIndex, value, align);\n    }\n\n    changeColumnAlignment = (columnIndex) => {\n        const {name, align} = this.props.columns[columnIndex];\n        this.props.onChangeColumn(columnIndex, name, this.getNextAlignment(align));\n    };\n\n    getNextAlignment = (currentAlignment) => {\n        switch (currentAlignment) {\n            case ALIGNMENT.LEFT:\n                return ALIGNMENT.CENTER;\n            case ALIGNMENT.CENTER:\n                return ALIGNMENT.RIGHT;\n            case ALIGNMENT.RIGHT:\n            default:\n                return ALIGNMENT.LEFT;\n        }\n    }\n\n    renderActionCell = (rowIndex) => {\n        return (\n            <Cell>\n                <Button title='Add a new Row'\n                        className='row-action-btn'\n                        minimal={true}\n                        intent={Intent.SUCCESS}\n                        small={true}\n                        icon={IconNames.ADD}\n                        onClick={() => this.addNewRow(rowIndex)}/>\n                <Button title='Duplicate Row'\n                        className='row-action-btn'\n                        minimal={true}\n                        intent={Intent.PRIMARY}\n                        small={true}\n                        icon={IconNames.DUPLICATE}\n                        onClick={() => this.duplicateRow(rowIndex)}/>\n                <Button title='Move Row Up'\n                        className='row-action-btn'\n                        disabled={rowIndex === 0}\n                        minimal={true}\n                        intent={Intent.PRIMARY}\n                        small={true}\n                        icon={IconNames.ARROW_UP}\n                        onClick={() => this.moveRowUp(rowIndex)}/>\n                <Button title='Move Row Down'\n                        className='row-action-btn'\n                        disabled={rowIndex === (this.props.rows.length - 1)}\n                        minimal={true}\n                        intent={Intent.PRIMARY}\n                        small={true}\n                        icon={IconNames.ARROW_DOWN}\n                        onClick={() => this.moveRowDown(rowIndex)}/>\n                <Button title='Remove this Row'\n                        className='row-action-btn'\n                        minimal={true}\n                        intent={Intent.DANGER}\n                        small={true}\n                        icon={IconNames.TRASH}\n                        onClick={() => this.deleteRow(rowIndex)}/>\n            </Cell>\n        );\n    };\n\n    addNewRow(rowIndex) {\n        const newRows = [...this.props.rows];\n        newRows.splice(rowIndex + 1, 0, new Array(this.props.numColumns).fill(''));\n        this.props.onChangeRows(newRows);\n    }\n\n    deleteRow(rowIndex) {\n        const newRows = [...this.props.rows];\n        if (newRows.length > 1) {\n            newRows.splice(rowIndex, 1);\n            this.props.onChangeRows(newRows);\n        }\n    }\n\n    duplicateRow(rowIndex) {\n        const newRows = [...this.props.rows];\n        newRows.splice(rowIndex + 1, 0, [...(this.props.rows[rowIndex])]);\n        this.props.onChangeRows(newRows);\n    }\n\n    moveRowDown(rowIndex) {\n        const newRows = [...this.props.rows];\n        const currentRow = newRows[rowIndex];\n        newRows[rowIndex] = newRows[rowIndex + 1];\n        newRows[rowIndex + 1] = currentRow;\n        this.props.onChangeRows(newRows);\n    }\n\n    moveRowUp(rowIndex) {\n        const newRows = [...this.props.rows];\n        const currentRow = newRows[rowIndex];\n        newRows[rowIndex] = newRows[rowIndex - 1];\n        newRows[rowIndex - 1] = currentRow;\n        this.props.onChangeRows(newRows);\n    }\n\n    getAlignmentIcon = (alignment) => {\n        switch (alignment) {\n            case ALIGNMENT.RIGHT:\n                return IconNames.ALIGN_RIGHT;\n            case ALIGNMENT.CENTER:\n                return IconNames.ALIGN_CENTER;\n            case ALIGNMENT.LEFT:\n            default:\n                return IconNames.ALIGN_LEFT;\n        }\n    }\n\n    getAlignmentClass = (alignment) => {\n        switch (alignment) {\n            case ALIGNMENT.RIGHT:\n                return Classes.ALIGN_RIGHT;\n            case ALIGNMENT.CENTER:\n                return 'bp3-align-center';\n            case ALIGNMENT.LEFT:\n            default:\n                return Classes.ALIGN_LEFT;\n        }\n    }\n\n    autoFill = () => {\n        // Fill Column names\n        this.props.columns.forEach((column, index) => {\n            const {name, align} = this.props.columns[index];\n            if (!name || name.trim() === '') {\n                this.props.onChangeColumn(index, `Column ${index + 1}`, align);\n            }\n        });\n\n        const numCols = this.props.numColumns;\n        // Fill the rows\n        const newRows = [];\n        for (let i = 0; i < this.props.rows.length; i++) {\n            // Generate half as 2 letter words\n            const halfCount = numCols / 2;\n            let words = randomWords({exactly: halfCount, wordsPerString: 2});\n            // Generate rest as one letter words\n            words = words.concat(randomWords({exactly: numCols - halfCount, wordsPerString: 1}));\n            // Shuffle words\n            words = words.sort(() => Math.random() - 0.5);\n            newRows.push(words);\n        }\n        this.props.onChangeRows(newRows);\n    };\n\n}\n","import {Position, Toaster, Intent} from \"@blueprintjs/core\";\nimport {IconNames} from \"@blueprintjs/icons\";\n\nconst toaster = Toaster.create({\n    position: Position.BOTTOM_RIGHT\n});\n\n/**\n * @author Udith Gunaratna\n */\nclass ToastUtil {\n\n    showSuccessToast = (message) => {\n        toaster.show({\n            message,\n            icon: IconNames.TICK,\n            intent: Intent.SUCCESS,\n            timeout: 2000\n        })\n    }\n}\n\nexport const TOAST_UTIL = new ToastUtil();\n","import React, {Fragment} from \"react\";\nimport {Button, Card, H3, Intent, Switch} from \"@blueprintjs/core\";\nimport {IconNames} from \"@blueprintjs/icons\";\nimport './output-table.css';\nimport {ALIGNMENT} from \"./table-generator\";\nimport {TOAST_UTIL} from \"../util/toast-util\";\n\nconst BORDER_CHAR = '|';\nconst CORNER_CHAR = '+';\nconst HEADER_SEP_CHAR = '-';\nconst ROW_SEP_CHAR = '.';\n\n/**\n * @author Udith Gunaratna\n */\nexport default class OutputTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            asciiTable: '',\n            addRowSep: true,\n            version: 1\n        };\n    }\n\n    componentDidMount() {\n        this.generateTable();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.version === this.state.version) {\n            // Prop update\n            this.generateTable();\n        }\n    }\n\n    render() {\n        return <Fragment>\n            <div className='section-title-bar'>\n                <H3>Output</H3>\n                <div className='section-title-buttons'>\n                    <Switch\n                        inline={true}\n                        labelElement={<strong>Add Row Separators</strong>}\n                        checked={this.state.addRowSep}\n                        onChange={this.toggleRowSeparators}\n                    />\n                    <Button outlined={true} minimal={true} icon={IconNames.REFRESH} intent={Intent.SUCCESS}\n                            onClick={this.regenerateTable}>\n                        Regenerate Table\n                    </Button>\n                    <Button outlined={true} minimal={true} icon={IconNames.CLIPBOARD} intent={Intent.PRIMARY}\n                            onClick={this.copyToClipboard}>\n                        Copy to clipboard\n                    </Button>\n                </div>\n            </div>\n            <Card id='output-table-container'>{this.state.asciiTable}</Card>\n        </Fragment>\n    }\n\n    toggleRowSeparators = (e) => {\n        this.setState({addRowSep: e.target.checked});\n    };\n\n    regenerateTable = () => {\n        this.generateTable();\n        TOAST_UTIL.showSuccessToast('Table Re-Generated');\n    };\n\n    copyToClipboard = () => {\n        let selection = window.getSelection();\n        let range = document.createRange();\n        range.selectNode(document.getElementById('output-table-container'));\n        selection.removeAllRanges();\n        selection.addRange(range);\n        document.execCommand(\"copy\");\n        TOAST_UTIL.showSuccessToast('Copied table to clipboard');\n    };\n\n    generateTable = () => {\n        const {columns, rows} = this.props;\n        const columnWidths = this.getColumnWidths(columns, rows);\n\n        const alignments = columns.map(col => col.align);\n\n        let asciiTable = '';\n        const headerSep = this.getHeaderSeparator(columnWidths);\n        const rowSep = (this.state.addRowSep) ? this.getRowSeparator(columnWidths) : '';\n\n        asciiTable = this.addLineToTable(asciiTable, headerSep, true);\n        // Generate header with center aligned\n        asciiTable = this.addLineToTable(asciiTable, this.generateRow(columnWidths,\n            new Array(columns.length).fill(ALIGNMENT.CENTER), columns.map(col => col.name)));\n        asciiTable = this.addLineToTable(asciiTable, headerSep);\n\n        // Generate rows\n        rows.forEach((row, index) => {\n            asciiTable = this.addLineToTable(asciiTable, this.generateRow(columnWidths, alignments, row));\n            if ((this.state.addRowSep) && (index < (rows.length - 1))) {\n                asciiTable = this.addLineToTable(asciiTable, rowSep);\n            }\n        });\n        asciiTable = this.addLineToTable(asciiTable, headerSep);\n\n        this.setState({asciiTable, version: this.state.version + 1});\n    };\n\n    getColumnWidths = (columns, rows) => {\n        const widths = [];\n\n        columns.forEach((column, index) => {\n            let maxWidth = column.name ? column.name.length : 0;\n            rows.forEach(row => {\n                const cellValue = row[index];\n                if ((cellValue) && (cellValue.length > maxWidth)) {\n                    maxWidth = cellValue.length;\n                }\n            });\n            widths[index] = maxWidth + 2; // extra 2 for padding on sides\n        });\n\n        return widths;\n    };\n\n    generateRow = (columnWidths, alignments, row) => {\n        const cellValues = [];\n        row.forEach((cell, index) => {\n            const colWidth = columnWidths[index];\n            const alignment = alignments[index];\n\n            let cellValue = cell;\n            switch (alignment) {\n                case ALIGNMENT.LEFT:\n                default: {\n                    cellValue = cellValue.padStart(cell.length + 1, ' ');\n                    cellValue = cellValue.padEnd(colWidth, ' ');\n                    break;\n                }\n                case ALIGNMENT.RIGHT: {\n                    cellValue = cellValue.padEnd(cell.length + 1, ' ');\n                    cellValue = cellValue.padStart(colWidth, ' ');\n                    break;\n                }\n                case ALIGNMENT.CENTER: {\n                    cellValue = cellValue.padStart(cell.length + ((colWidth - cell.length) / 2), ' ');\n                    cellValue = cellValue.padEnd(colWidth, ' ');\n                    break;\n                }\n            }\n            cellValues[index] = cellValue;\n        });\n        return (BORDER_CHAR + cellValues.join(BORDER_CHAR) + BORDER_CHAR);\n    };\n\n    getHeaderSeparator(columnWidths) {\n        let headerSeparator = CORNER_CHAR;\n        columnWidths.forEach(colWidth => {\n            headerSeparator += HEADER_SEP_CHAR.repeat(colWidth) + CORNER_CHAR;\n        });\n        return headerSeparator;\n    }\n\n    getRowSeparator(columnWidths) {\n        let rowSeparator = BORDER_CHAR;\n        columnWidths.forEach(colWidth => {\n            rowSeparator += ROW_SEP_CHAR.repeat(colWidth) + BORDER_CHAR;\n        });\n        return rowSeparator;\n    }\n\n    addLineToTable(table, line, noNewLinePrefix = false) {\n        return (table + (noNewLinePrefix ? '' : '\\n') + line);\n    }\n\n}\n","import React from \"react\";\nimport {Button, Classes, Intent, InputGroup, Label, Card} from \"@blueprintjs/core\";\nimport './table-generator.css';\nimport InputTable from \"./input-table\";\nimport OutputTable from \"./output-table\";\n\nconst DEFAULT_COL_NUM = 3;\nexport const ALIGNMENT = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    CENTER:'center'\n}\n\n/**\n * @author Udith Gunaratna\n */\nexport default class TableGenerator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            numCols: DEFAULT_COL_NUM,\n            columns: this.generateColumns(DEFAULT_COL_NUM),\n            rows: [new Array(DEFAULT_COL_NUM).fill('')]\n        }\n    }\n\n    onNumColChange = (e) => {\n        const value = e.target.value;\n        this.setState({\n            numCols: (isNaN(value) || (value < 1)) ? this.state.numCols : Number(value)\n        });\n    }\n\n    onColChangeApply = () => {\n        this.setState({\n            columns: this.generateColumns(this.state.numCols, this.state.columns)\n        });\n    }\n\n    generateColumns = (numCols, currentColumns = []) => {\n        if (numCols < currentColumns.length) {\n            return currentColumns.slice(0, numCols);\n        } else if (numCols > currentColumns.length) {\n            const newColumns = [...currentColumns];\n            for (let i = currentColumns.length; i < numCols; i++) {\n                newColumns[i] = {name: `Column ${i + 1}`, align: ALIGNMENT.LEFT};\n            }\n            return newColumns;\n        }\n        return currentColumns;\n    }\n\n    onChangeRows = (rows) => {\n      this.setState({rows});\n    };\n\n    onChangeColumn = (columnIndex, name, align) => {\n        const columns = [...this.state.columns];\n        columns[columnIndex] = {name, align}\n        this.setState({columns});\n    };\n\n    render() {\n        return <div className='table-generator'>\n            <Label className={Classes.INLINE}>\n                Number of Columns\n                <InputGroup\n                    type='number'\n                    placeholder='Number of table columns'\n                    value={this.state.numCols}\n                    min={1}\n                    rightElement={\n                        <Button\n                            intent={Intent.SUCCESS}\n                            outlined={true}\n                            onClick={this.onColChangeApply}>Apply</Button>\n                    }\n                    onChange={this.onNumColChange}>\n                </InputGroup>\n            </Label>\n            <Card>\n                <InputTable\n                    numColumns={this.state.numCols}\n                    columns={this.state.columns}\n                    rows={this.state.rows}\n                    onChangeRows={this.onChangeRows}\n                    onChangeColumn={this.onChangeColumn}/>\n            </Card>\n            <Card>\n                <OutputTable\n                    numColumns={this.state.numCols}\n                    columns={this.state.columns}\n                    rows={this.state.rows}/>\n            </Card>\n        </div>;\n    }\n}\n","import './App.css';\nimport {H1} from \"@blueprintjs/core\";\nimport TableGenerator from \"./components/table-generator\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <H1>ASCII Table Generator</H1>\n            <TableGenerator/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}